[
    {
        "case number": "50",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "51",
        "code": "\"\"\"\nYou get a string and need to return its number of vowels.\nFor this test, we will only consider a, e, i, o and u as vowels.\n\nFor example:\n\nInput: \"Alabama\"\nOutput: 4\n\nInput: \"Caserta\"\nOutput: 3\n\n\"\"\"\n\n\n#For Loop\ndef count(input_string):\n    num_vowels = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in input_string.lower():\n        if letter in vowels:\n            num_vowels += 1\n\n    return num_vowels\n\n",
        "unittest": "from Company.vowel_count import count\n\n\ndef test_count():\n    assert count('Alabama') == 4\n    assert count('Caserta') == 3\n\n"
    },
    {
        "case number": "52",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "53",
        "code": "def add(x: int, y: int) -> int:\n    return x + y\n\n",
        "unittest": "from python_boilerplate import add\n\n\ndef test_add():\n    assert add(1, 1) == 2\n\n"
    },
    {
        "case number": "54",
        "code": "def hamming_sum(s0, s1):\n    if len(s0) != len(s1):\n        raise ValueError()\n    return sum(c0 != c1 for (c0, c1) in zip(s0, s1))\n\ndef hamming_loop(s0, s1):\n    if len(s0) != len(s1):\n        raise ValueError()\n    count = 0\n    for i in range(len(s0)):\n        count += (s0[i] != s1[i])\n    return count\n\n",
        "unittest": "from __future__ import print_function\nfrom timeit import timeit\n\nprint(\"*\" * 80)\nprint(\"python hamming_sum(): %.2f\" % timeit('hamming_sum(\"qwertyuio\", \"asdfghjkl\")',\n                                            'from hamming import hamming_sum'))\nprint(\"cython hamming_sum(): %.2f\" % timeit('hamming_sum(\"qwertyuio\", \"asdfghjkl\")',\n                                            'from hamming_cython import hamming_sum'))\nprint(\"optimal hamming_sum(): %.2f\" % timeit('hamming_sum(\"qwertyuio\", \"asdfghjkl\")',\n                                            'from hamming_cython_solution import hamming_sum'))\nprint(\"-\" * 80)\nprint(\"python hamming_loop(): %.2f\" % timeit('hamming_loop(\"qwertyuio\", \"asdfghjkl\")',\n                                             'from hamming import hamming_loop'))\nprint(\"cython hamming_loop(): %.2f\" % timeit('hamming_loop(\"qwertyuio\", \"asdfghjkl\")',\n                                             'from hamming_cython import hamming_loop'))\nprint(\"optimal hamming_loop(): %.2f\" % timeit('hamming_loop(b\"qwertyuio\", b\"asdfghjkl\")',\n                                             'from hamming_cython_solution import hamming_loop'))\nprint(\"*\" * 80)\n\n"
    },
    {
        "case number": "55",
        "code": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n",
        "unittest": "from {{cookiecutter.repo_name}}.{{cookiecutter.repo_name}} import fib\n\n\ndef test_fib() -> None:\n    assert fib(0) == 0\n    assert fib(1) == 1\n    assert fib(2) == 1\n    assert fib(3) == 2\n    assert fib(4) == 3\n    assert fib(5) == 5\n    assert fib(10) == 55\n\n"
    },
    {
        "case number": "56",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "57",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "58",
        "code": "from toolz import curry\n\n\n@curry\ndef intersection(list1, list2):\n    \"\"\"Combines two lists into a set (i.e. no duplicates) composed of those\n    elements common to both lists\"\"\"\n    return list(set(list1).intersection(set(list2)))\n\n",
        "unittest": "from ramda.intersection import intersection\nfrom ramda.private.asserts import *\n\n\ndef test_intersection():\n    assert_equal(intersection([1, 2, 3, 4, 4], [7, 6, 5, 4, 3, 4]), [3, 4])\n\n"
    },
    {
        "case number": "59",
        "code": "def is_prime(number):\n    if number < 0 or number in (0, 1):\n        return False\n\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n\n    return True\n\n",
        "unittest": "import pytest\n\nfrom primes import is_prime\n\n\n@pytest.fixture()\ndef prime_numbers():\n    return [3, 5, 7]\n\n\n@pytest.fixture()\ndef non_prime_numbers():\n    return [8, 0, 1]\n\n\n@pytest.fixture()\ndef negative_numbers():\n    return [-1, -3, -6]\n\n\ndef test_is_prime_true(prime_numbers):\n    for number in prime_numbers:\n        assert is_prime(number)\n\n\ndef test_is_prime_false(non_prime_numbers, negative_numbers):\n    for number in non_prime_numbers:\n        assert not is_prime(number)\n\n    for number in negative_numbers:\n        assert not is_prime(number)\n\n"
    },
    {
        "case number": "60",
        "code": "def add(n: int, m: int) -> int:\n    return n + m\n\n",
        "unittest": "\"\"\"A module with no PythonTA errors.\"\"\"\n\n\nclass MyClass:\n    \"\"\"This is a class.\"\"\"\n\n    name: str\n    value: int\n\n    def __init__(self) -> None:\n        self.name = \"A\"\n        self.value = 10\n\n"
    },
    {
        "case number": "61",
        "code": "OPENING = '('\n\n\ndef is_balanced(parentheses):\n    stack = []\n    for paren in parentheses:\n        if paren == OPENING:\n            stack.append(paren)\n        else:\n            try:\n                stack.pop()\n            except IndexError:  # too many closing parens\n                return False\n    return len(stack) == 0  # false if too many opening parens\n\n\nis_balanced('((()))')  # => True\nis_balanced('(()')  # => False\nis_balanced('())')  # => False\n\n",
        "unittest": "import unittest\n\nfrom balanced_parentheses import is_balanced\n\n\nclass TestCorrectness(unittest.TestCase):\n\n    def test_identifies_valid_sequence(self):\n        self.assertTrue(is_balanced('()'))\n        self.assertTrue(is_balanced('()(())'))\n\n    def test_identifies_left_imbalance(self):\n        self.assertFalse(is_balanced('(()'))\n\n    def test_identifies_right_imbalance(self):\n        self.assertFalse(is_balanced('())'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n\n"
    },
    {
        "case number": "62",
        "code": "\ndef difference(seq):\n    '''Returns the difference between consecutive elements in `seq`.\n    i.e., first derivative.\n    '''\n    result = [ ]\n    for i in range(len(seq) - 1):\n        result.append(seq[i+1] - seq[i])\n    return type(seq)(result)\n\n",
        "unittest": "from chiplotle import *\n\ndef test_difference_01( ):\n    '''Computes the difference of a list of ints.'''\n    a = [1, 2, 3, 4]\n    t = mathtools.difference(a)\n    assert t == [1, 1, 1]\n    assert isinstance(t, list)\n\n\ndef test_difference_02( ):\n    '''Computes the difference of a CoordinateArray.'''\n    a = CoordinateArray([(1, 2), (3, 4), (4, 4)])\n    t = mathtools.difference(a)\n    assert t == CoordinateArray([(2, 2), (1, 0)])\n    assert isinstance(t, CoordinateArray)\n\n\ndef test_difference_03( ):\n    '''The argument can be empty.'''\n    t = mathtools.difference([ ])\n    assert t == [ ]\n    assert isinstance(t, list)\n\n\ndef test_difference_04( ):\n    '''The argument can have one element.'''\n    t = mathtools.difference([2])\n    assert t == [ ]\n    assert isinstance(t, list)\n\n"
    },
    {
        "case number": "63",
        "code": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n",
        "unittest": "from {{cookiecutter.repo_name}}.{{cookiecutter.repo_name}} import fib\n\n\ndef test_fib() -> None:\n    assert fib(0) == 0\n    assert fib(1) == 1\n    assert fib(2) == 1\n    assert fib(3) == 2\n    assert fib(4) == 3\n    assert fib(5) == 5\n    assert fib(10) == 55\n\n"
    },
    {
        "case number": "64",
        "code": "\"\"\"\nYou get a string and need to return its number of vowels.\nFor this test, we will only consider a, e, i, o and u as vowels.\n\nFor example:\n\nInput: \"Alabama\"\nOutput: 4\n\nInput: \"Caserta\"\nOutput: 3\n\n\"\"\"\n\n\n#For Loop\ndef count(input_string):\n    num_vowels = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in input_string.lower():\n        if letter in vowels:\n            num_vowels += 1\n\n    return num_vowels\n\n",
        "unittest": "from Company.vowel_count import count\n\n\ndef test_count():\n    assert count('Alabama') == 4\n    assert count('Caserta') == 3\n\n"
    },
    {
        "case number": "65",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "66",
        "code": "def super_digit(n):\n    while len(str(n)) > 1:\n        total = 0\n        for digit in str(n):\n            total += int(digit)\n        n = total\n    return n\n\n",
        "unittest": "from super_digit import super_digit\n\n#On calcule les super digits des 1000 premiers nombres\nfor i in range(1, 1001):\n    print(\"{} => {}\".format(i, super_digit(i)))\n\n"
    },
    {
        "case number": "67",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "68",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "69",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "70",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "71",
        "code": "import math\n\ndef circum_circle_radius(a, b, c):\n  # Circumcircle radius calculation from http://www.mathopenref.com/trianglecircumcircle.html\n  if a > 0 and b > 0 and c > 0:\n    try:\n      divider = math.sqrt(math.fabs((a+b+c)*(b+c-a)*(c+a-b)*(a+b-c)))\n      return (a * b * c) / divider\n    except ZeroDivisionError:\n      return 10000\n  else:\n    return 10000\n\n",
        "unittest": "from curvature.radiusmath import circum_circle_radius \n\ndef test_circum_circle_radius_zero_lengths():\n  assert circum_circle_radius(0, 0, 0) == 10000\n\ndef test_circum_circle_radius_zero_division():\n  assert circum_circle_radius(0.13430093277996386, 0.13430093277996386, 0.2686018655599277) == 10000\n"
    },
    {
        "case number": "72",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "73",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "74",
        "code": "#!/usr/bin/env python\n\ndef lstartswith(l1, l2):\n    if len(l2) > len(l1):\n        return False\n    return l1[:len(l2)] == l2\n\n\ndef lendswith(l1, l2):\n    if len(l2) > len(l1):\n        return False\n    return l1[len(l1) - len(l2):] == l2\n\n",
        "unittest": "#!/usr/bin/env python\n\nimport unittest\n\nimport dlint\n\n\nclass TestUtil(unittest.TestCase):\n\n    def test_lendswith(self):\n        assert not dlint.util.lendswith([1, 2], [1, 2, 3])\n        assert not dlint.util.lendswith([1, 2, 3], [1, 2])\n\n        assert dlint.util.lendswith([1, 2, 3], [2, 3])\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n"
    },
    {
        "case number": "75",
        "code": "def is_prime(number):\n    if number < 0 or number in (0, 1):\n        return False\n\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n\n    return True\n\n",
        "unittest": "import pytest\n\nfrom primes import is_prime\n\n\n@pytest.fixture()\ndef prime_numbers():\n    return [3, 5, 7]\n\n\n@pytest.fixture()\ndef non_prime_numbers():\n    return [8, 0, 1]\n\n\n@pytest.fixture()\ndef negative_numbers():\n    return [-1, -3, -6]\n\n\ndef test_is_prime_true(prime_numbers):\n    for number in prime_numbers:\n        assert is_prime(number)\n\n\ndef test_is_prime_false(non_prime_numbers, negative_numbers):\n    for number in non_prime_numbers:\n        assert not is_prime(number)\n\n    for number in negative_numbers:\n        assert not is_prime(number)\n\n"
    },
    {
        "case number": "76",
        "code": "def pow1(x, n: int):\n    \"\"\"\n    compute x ^ n\n    \"\"\"\n    if n == 0:\n        return 1\n    square = x * x\n    if n % 2:\n        return pow1(square, n // 2) * x\n    return pow1(square, n // 2)\n\n\ndef pow2(x, n: int):\n    \"\"\"\n    compute x ^ n\n    \"\"\"\n    if n == 0:\n        return 1\n    tmp = pow2(x, n // 2)\n    if n % 2:\n        return tmp * tmp * x\n    return tmp * tmp\n\n",
        "unittest": "import math\nimport random\nfrom unittest import TestCase\nfrom pow import pow1, pow2\n\n\nclass Test(TestCase):\n    def test_pow1(self):\n        x = random.randint(1, 10)\n        for n in range(10):\n            self.assertEqual(pow1(x, n), math.pow(x, n))\n\n    def test_pow2(self):\n        x = random.randint(1, 10)\n        for n in range(10):\n            self.assertEqual(pow2(x, n), math.pow(x, n))\n\n"
    },
    {
        "case number": "77",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "78",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "79",
        "code": "def binary_to_decimal(binary):\n    \"\"\"Convertit un nombre en base binaire en un nombre en base d\u00e9cimale\"\"\"\n    \n    if \"0b\" in binary:\n        binary = binary.replace(\"0b\", \"\")\n        \n    total = 0\n    for i, bit in enumerate(binary[::-1]):\n        total += int(bit) * 2**i\n\n    return total\n\n",
        "unittest": "from binary_to_decimal import *\n\n#On convertit les 100 premiers nombres binaires en nombres d\u00e9cimaux\nfor i in range(100):\n    i = bin(i)\n    print(binary_to_decimal(i))\n\n"
    },
    {
        "case number": "80",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "81",
        "code": "GRADE_MAPPINGS = {\n    'A': 12.0,\n    'A-': 11.0,\n    'B+': 10.0,\n    'B': 9.0,\n    'B-': 8.0,\n    'C+': 7.0,\n    'C': 6.0,\n    'C-': 5.0,\n    'D': 3.0,\n    'E': 0.0\n}\n\n\ndef numeric_value_for_grade(grade):\n    \"\"\"\n    Based on excerpt from GPA calculation:\n    an A counts as 12 points, A- as 11, B+ as 10, B as 9, B- as 8, C+ as 7,\n    C as 6, C- as 5, D as 3, and E as 0.\n    Sometimes grades can come like this: A /A-\n    \"\"\"\n    letter_grades = [g.strip() for g in grade.split(\"/\")]\n    return sum([GRADE_MAPPINGS[g] for g in letter_grades]) / len(letter_grades)\n\n",
        "unittest": "from django.test import TestCase\nfrom lib import grades\n\n\nclass GradesTestCase(TestCase):\n\n    def test_numeric_value_for_grade_retrieves_single_letter_grades(self):\n        for grade, value in grades.GRADE_MAPPINGS.iteritems():\n            self.assertEqual(grades.numeric_value_for_grade(grade), value)\n\n    def test_numeric_value_for_grade_handles_in_between_grades(self):\n        self.assertEqual(grades.numeric_value_for_grade(\n            'A/A-'), (11.0 + 12.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'A-/B+'), (10.0 + 11.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'B+/B'), (9.0 + 10.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'B/B-'), (8.0 + 9.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'B-/C+'), (7.0 + 8.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'C+/C'), (6.0 + 7.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'C/C-'), (5.0 + 6.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'C-/D'), (3.0 + 5.0) / 2)\n        self.assertEqual(grades.numeric_value_for_grade(\n            'D/E'), (0.0 + 3.0) / 2)\n\n"
    },
    {
        "case number": "82",
        "code": "def is_prime(number):\n    if number < 0 or number in (0, 1):\n        return False\n\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n\n    return True\n\n",
        "unittest": "import pytest\n\nfrom primes import is_prime\n\n\n@pytest.fixture()\ndef prime_numbers():\n    return [3, 5, 7]\n\n\n@pytest.fixture()\ndef non_prime_numbers():\n    return [8, 0, 1]\n\n\n@pytest.fixture()\ndef negative_numbers():\n    return [-1, -3, -6]\n\n\ndef test_is_prime_true(prime_numbers):\n    for number in prime_numbers:\n        assert is_prime(number)\n\n\ndef test_is_prime_false(non_prime_numbers, negative_numbers):\n    for number in non_prime_numbers:\n        assert not is_prime(number)\n\n    for number in negative_numbers:\n        assert not is_prime(number)\n\n"
    },
    {
        "case number": "83",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "84",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "85",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "86",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "87",
        "code": "def argsort(nums):\n    return [idx for idx, val in sorted(enumerate(nums), key=lambda x: x[1])]\n\n",
        "unittest": "import numpy as np\n\nfrom argsort import argsort\n\ndef test_argsort():\n    list1 = [0, 3, 4, 5, 1, 9]\n    list2 = []\n    list3 = [1]\n    list4 = [0, 1, 2, 3, 4]\n    list5 = [-2, 1, 1, 3, 1]\n    lists = [list1, list2, list3, list4]\n    for listt in lists:\n        sorted_idxs = argsort(np.copy(listt))\n        assert np.array_equal(np.argsort(listt), sorted_idxs)\n\n"
    },
    {
        "case number": "88",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "89",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "90",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "91",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "92",
        "code": "def add(x: int, y: int) -> int:\n    return x + y\n\n",
        "unittest": "from python_boilerplate import add\n\n\ndef test_add():\n    assert add(1, 1) == 2\n\n"
    },
    {
        "case number": "93",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "94",
        "code": "def is_prime(n):\n    \"\"\"returns True if n is prime else False\"\"\"\n    if n < 5 or n & 1 == 0 or n % 3 == 0:\n        return 2 <= n <= 3\n    s = ((n - 1) & (1 - n)).bit_length() - 1\n    d = n >> s\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        p = pow(a, d, n)\n        if p == 1 or p == n - 1 or a % n == 0:\n            continue\n        for _ in range(s):\n            p = (p * p) % n\n            if p == n - 1:\n                break\n        else:\n            return False\n    return True\n\n",
        "unittest": "from pyrival.is_prime import *\n\n\ndef test_is_prime(prime_set):\n    for i in range(max(prime_set) + 1):\n        assert is_prime(i) == (i in prime_set)\n\n    assert is_prime(10**8 + 7) == True\n    assert is_prime(10**9 + 7) == True\n    assert is_prime(10**9 + 9) == True\n\n    assert is_prime(326549970232583195150330872691) == True\n    assert is_prime(551957180201435611622967802607) == True\n    assert is_prime(722963248890983103711213365897) == True\n\n    assert is_prime(688220523361999133670399137430) == False\n    assert is_prime(400284591585155461390239326086) == False\n    assert is_prime(576409959862662626347091665567) == False\n\n"
    },
    {
        "case number": "95",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "96",
        "code": "from math import sqrt, ceil\n\n\ndef prime_sieve(n):\n    if n < 2:\n        return []\n\n    primes = [True] * n\n\n    primes[0], primes[1] = False, False\n\n    for i in range(2, ceil(sqrt(n))):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n\n    return [num for num, val in enumerate(primes) if val]\n\n",
        "unittest": "from unittest import TestCase\nfrom prime_sieve import prime_sieve\n\n\nclass PrimeSieveTest(TestCase):\n    def test_primes(self):\n        actual = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\n                  41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        expected = prime_sieve(100)\n        assert actual == expected\n\n    def test_no_primes(self):\n        assert prime_sieve(1) == []\n\n    def test_one_prime(self):\n        assert prime_sieve(3) == [2]\n\n"
    },
    {
        "case number": "97",
        "code": "def add(a, b):\n    return a + b\n\n\ndef subtract(a, b):\n    return a - b\n\n\ndef multiply(a, b):\n    return a * b\n\n\ndef divide(numerator, denominator):\n    return float(numerator) / denominator\n",
        "unittest": "# test_mymath.py\nimport mymath\nimport unittest\n\nclass TestAdd(unittest.TestCase):\n    \"\"\"\n    Test the add function from the mymath library\n    \"\"\"\n\n    def test_add_integers(self):\n        \"\"\"\n        Test that the addition of two integers returns the correct total\n        \"\"\"\n        result = mymath.add(1, 2)\n        self.assertEqual(result, 3)\n\n    def test_add_floats(self):\n        \"\"\"\n        Test that the addition of two floats returns the correct result\n        \"\"\"\n        result = mymath.add(10.5, 2)\n        self.assertEqual(result, 12.5)\n\n    def test_add_strings(self):\n        \"\"\"\n        Test the addition of two strings returns the two string as one\n        concatenated string\n        \"\"\"\n        result = mymath.add('abc', 'def')\n        self.assertEqual(result, 'abcdef')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
        "case number": "98",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "99",
        "code": "from math import ceil\n\n\ndef round_to_decimal(value, precision: float = 0.5) -> float:\n    \"\"\"\n    Helper function to round a given value to a specific precision, for example *.5\n    So 5.4 will be rounded to 5.5\n    \"\"\"\n    return round(precision * round(float(value) / precision), 1)\n\n\ndef round_up_decimal(value, precision: float = 0.5) -> float:\n    \"\"\"\n    Helper function to round a given value up a specific precision, for example *.5\n    So 5.4 will be rounded to 5.5 and 5.6 to 6.0\n    \"\"\"\n    return ceil(value * (1 / precision)) / (1 / precision)\n\n",
        "unittest": "from django.test import TestCase\n\nfrom ai_django_core.utils.math import round_to_decimal, round_up_decimal\n\n\nclass MathTest(TestCase):\n    def test_round_to_decimal_no_precision(self):\n        self.assertEqual(round_to_decimal(5.2, 1), 5)\n\n    def test_round_to_decimal_two_precisions(self):\n        self.assertEqual(round_to_decimal(5.62, 0.05), 5.60)\n\n    def test_round_to_decimal_down_lower(self):\n        self.assertEqual(round_to_decimal(5.2), 5.0)\n\n    def test_round_to_decimal_up_lower(self):\n        self.assertEqual(round_to_decimal(5.4), 5.5)\n\n    def test_round_to_decimal_down_upper(self):\n        self.assertEqual(round_to_decimal(5.6), 5.5)\n\n    def test_round_to_decimal_no_round(self):\n        self.assertEqual(round_to_decimal(5.0), 5.0)\n\n    def test_round_to_decimal_up_upper(self):\n        self.assertEqual(round_to_decimal(5.8), 6.0)\n\n    def test_round_up_decimal_no_precision(self):\n        self.assertEqual(round_up_decimal(5.2, 1), 6)\n\n    def test_round_up_decimal_two_precisions(self):\n        self.assertEqual(round_up_decimal(5.62, 0.05), 5.65)\n\n    def test_round_up_decimal_down_lower(self):\n        self.assertEqual(round_up_decimal(5.2), 5.5)\n\n    def test_round_up_decimal_up_lower(self):\n        self.assertEqual(round_up_decimal(5.4), 5.5)\n\n    def test_round_up_decimal_down_upper(self):\n        self.assertEqual(round_up_decimal(5.6), 6.0)\n\n    def test_round_up_decimal_no_round(self):\n        self.assertEqual(round_up_decimal(5.0), 5.0)\n\n    def test_round_up_decimal_up_upper(self):\n        self.assertEqual(round_up_decimal(5.8), 6.0)\n\n"
    },
    {
        "case number": "100",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "101",
        "code": "def comma_separated(xs):\n    \"\"\"Convert each value in the sequence xs to a string, and separate them\n    with commas.\n\n    >>> comma_separated(['spam', 5, False])\n    'spam, 5, False'\n    >>> comma_separated([5])\n    '5'\n    >>> comma_separated([])\n    ''\n    \"\"\"\n    return ', '.join([str(x) for x in xs])\n\n\n",
        "unittest": "import random\n\nSUMMARY = \"Start scores = ({s0}, {s1}).\\nPlayer {w} rolls {nr} dice and gets outcomes {rv}.\\nEnd scores = ({e0}, {e1})\"\n\ndef describe_game(hog, hog_gui, test_number, score0, score1, goal):\n    strat_seed0, strat_seed1, dice_seed = run_with_seed(test_number, lambda: [random.randrange(2**32) for _ in range(3)])\n    strategy0 = random_strat(strat_seed0)\n    strategy1 = random_strat(strat_seed1)\n    dice = get_dice(dice_seed)\n    s0last, s1last, game_trace = hog_gui.trace_play(\n        hog.play,\n        strategy0,\n        strategy1,\n        score0=score0,\n        score1=score1,\n        dice=dice,\n        goal=goal,\n        say=hog.silence)\n\n    end_of_turn = [(turn[\"s0_start\"], turn[\"s1_start\"]) for turn in game_trace[1:]]\n    end_of_turn.append((s0last, s1last))\n    summary = []\n    for turn, end in zip(game_trace, end_of_turn):\n        summary.append(SUMMARY.format(\n            s0=turn[\"s0_start\"],\n            s1=turn[\"s1_start\"],\n            w=turn[\"who\"],\n            nr=turn[\"num_dice\"],\n            rv=turn[\"dice_values\"],\n            e0=end[0],\n            e1=end[1]\n        ))\n    summary.append(\"Game Over\")\n    return summary\n\ndef random_strat(seed):\n    \"\"\"\n    Makes a random strategy from based on the given seed\n    \"\"\"\n    def random_strat(score, opponent_score):\n        # Save the state of the random generator, so strategy calls don't\n        # impact dice rolls.\n        # using this because python's hash function is NOT CONSISTENT ACROSS OSs!!!!!!!!!!!!11!!22!!2!\n        conditional_seed = score * 314159265358979 + opponent_score * 27182818284590452353602874713527 + seed * 161803398874989484820\n        return run_with_seed(conditional_seed % (2 ** 32), lambda: random.randrange(0, 11))\n    return random_strat\n\ndef run_with_seed(seed, fn):\n    state = random.getstate()\n    random.seed(seed)\n    result = fn()\n    random.setstate(state)\n    return result\n\ndef get_dice(seed):\n    def dice():\n        nonlocal seed\n        seed, value = run_with_seed(seed, lambda: (random.randrange(0, 2**32), random.randrange(1, 7)))\n        return value\n    return dice\n\n"
    },
    {
        "case number": "102",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "103",
        "code": "import math\n\n\ndef mean(target_list: list[int], floor: bool = True) -> int:\n    \"\"\"\n    Gets the mean value of the list, rounded down if floor is True, else rounded up\n    \"\"\"\n    if floor:\n        return mean_floor(target_list)\n\n    return mean_ceil(target_list)\n\n\ndef mean_floor(target_list: list[int]) -> int:\n    \"\"\"\n    Gets the rounded down mean of the list\n    \"\"\"\n    return sum(target_list) // len(target_list)\n\n\ndef mean_ceil(target_list: list[int]) -> int:\n    \"\"\"\n    Gets the rounded up mean of the list\n    \"\"\"\n    return math.ceil(sum(target_list) / len(target_list))\n\n\ndef gaussian_sum(number: int) -> int:\n    \"\"\"\n    Gets the sum of all numbers up to the provided number.\n    E.g. gaussian_sum(5) == sum([1, 2, 3, 4, 5])\n    :param number:\n    :return:\n    \"\"\"\n    return number * (1 + number) // 2\n\n",
        "unittest": "import pytest\n\nfrom adventofcode.util.math_helpers import gaussian_sum, mean_ceil, mean_floor\n\n\n@pytest.mark.parametrize(\"number\", [*range(0, 10, 3)])\ndef test_gaussian_sum(number):\n    assert gaussian_sum(number) == sum(range(1, number + 1))\n\n\n@pytest.mark.parametrize([\"target_list\", \"expected\"], [([1, 2, 3, 4, 5], 3), ([13, 34, 45, 68, 5], 33)])\ndef test_mean_floor(target_list, expected):\n    assert mean_floor(target_list) == expected\n\n\n@pytest.mark.parametrize(\n    [\"target_list\", \"expected\"],\n    [([123, 34546, 341, 45], 8764), ([13, 34, 45, 68, 5], 33)],\n)\ndef test_mean_ceil(target_list, expected):\n    assert mean_ceil(target_list) == expected\n\n"
    },
    {
        "case number": "104",
        "code": "from __future__ import print_function, division, absolute_import\n\ndef unique(seq):\n    '''Returns a list of unique items maintaining the order of the original.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]\n\n",
        "unittest": "\nfrom msmbuilder.utils import unique\n\ndef test_unique():\n    assert unique([1,2,3,3,2,1]) == [1,2,3]\n    assert unique([3,3,2,2,1,1]) == [3,2,1]\n    assert unique([3,1,2,1,2,3]) == [3,1,2]\n\n"
    },
    {
        "case number": "105",
        "code": "",
        "unittest": ""
    },
    {
        "case number": "106",
        "code": "# coding: utf-8\n\"\"\"\nhttps://en.wikipedia.org/wiki/Factorial\n\n0! = 1\n1! = 1\nn! = n * (n - 1) * (n - 2) * (n - 3) * ... * 3 * 2 * 1\n\"\"\"\n\n\ndef factorial(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('n is invalid')\n\n    # Base case\n    if n <= 1:\n        return 1\n\n    # Recursive case\n    return n * factorial(n - 1)\n\n\ndef factorial_for_loop(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n    return ans\n\n",
        "unittest": "# coding: utf-8\nimport math\nimport random\nimport unittest\n\nfrom algorithms.math.factorial import factorial\nfrom algorithms.math.factorial import factorial_for_loop\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        with self.assertRaises(ValueError):\n            factorial(-1)\n\n        with self.assertRaises(ValueError):\n            factorial(0.5)\n\n        with self.assertRaises(ValueError):\n            factorial('abc')\n\n        self.assertEqual(factorial(0), 1)\n        self.assertEqual(factorial(1), 1)\n        self.assertEqual(factorial(2), 2)\n        self.assertEqual(factorial(3), 6)\n        self.assertEqual(factorial(4), 24)\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(6), 720)\n        self.assertEqual(factorial(7), 5040)\n        self.assertEqual(factorial(8), 40320)\n        self.assertEqual(factorial(9), 362880)\n        self.assertEqual(factorial(10), 3628800)\n\n    def test_2(self):\n        rand_i = random.randint(0, 100)\n        self.assertEqual(factorial(rand_i), math.factorial(rand_i))\n\n\nclass TestCase2(unittest.TestCase):\n    def test(self):\n        self.assertEqual(factorial_for_loop(0), 1)\n        self.assertEqual(factorial_for_loop(1), 1)\n        self.assertEqual(factorial_for_loop(2), 2)\n        self.assertEqual(factorial_for_loop(3), 6)\n        self.assertEqual(factorial_for_loop(4), 24)\n        self.assertEqual(factorial_for_loop(5), 120)\n        self.assertEqual(factorial_for_loop(6), 720)\n        self.assertEqual(factorial_for_loop(7), 5040)\n        self.assertEqual(factorial_for_loop(8), 40320)\n        self.assertEqual(factorial_for_loop(9), 362880)\n        self.assertEqual(factorial_for_loop(10), 3628800)\n\n    def test_2(self):\n        rand_i = random.randint(0, 10000)\n        self.assertEqual(factorial_for_loop(rand_i), math.factorial(rand_i))\n\n\nif __name__ == '__main__':\n    unittest.main()\n\n"
    },
    {
        "case number": "107",
        "code": "#import reverse_string\ndef palindrome(string):\n\tnum = len(string) - 1\n\tsecond_half = ''\n\tmid = len(string) - 1\n\twhile (num > mid/2):\n\t\tsecond_half += string[num]\n\t\tnum -=1\n\n\tfirst_half = string[:len(string)/2]\n\tif first_half == second_half:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint palindrome(\"racecar\")\nprint palindrome(\"poop\")\n\n",
        "unittest": "\"\"\" approximate string matching and edit distance \"\"\"\nstr1 = input(\"Enter the string : \")\nstr2 = input(\"Enter the string to form : \")\n\nn = len(str1)+1\nm = len(str2)+1\narr = [[j for j in range(m)] for i in range(n)]\nfor i in range(n):\n    arr[i][0] = i\n\ndef check(i,j):\n    if(str1[i] == str2[j]):\n        return 1\n    else:\n        return 0\n\nfor i in range(1,n):\n    for j in range(1,m):\n        arr[i][j] = min([arr[i][j-1]+1, arr[i-1][j]+1, arr[i-1][j-1]+check(i-1,j-1)])\n   \nprint(\"Edit Distance : \"+str(arr[n-1][m-1]))\n"
    },
    {
        "case number": "108",
        "code": "class Solution:\n    def addDigits(self, num: int) -> int:\n        if num < 10:\n            return num\n\n        new_num = 0\n        while num > 0:\n            new_num += num % 10\n            num //= 10\n\n        return self.addDigits(new_num)\n\n",
        "unittest": "from typing import List\n\n\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        answer = 0\n        double_nums = [num * 2 for num in nums]\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if double_nums[i] <= nums[j]:\n                    answer += 1\n\n        return answer\n\n# WA\n# [1,78,27,48,14,86,79,68,77,20,57,21,18,67,5,51,70,85,47,56,22,79,41,8,39,81,59,74,14,45,49,15,10,28,16,77,22,65,8,36,79,94,44,80,72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10]\n# output: 1153\n# expected: 64\n\n"
    },
    {
        "case number": "109",
        "code": "",
        "unittest": ""
    }
]